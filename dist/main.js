/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// Example data fetched from your Spring Boot REST API\r\nconst stockIndexesIndia = [\r\n    { direction: \"profit\", name: \"NIFTY 50\", totalPoints: 17990, percentageChange: 4.4, pointsLost: 34 },\r\n    { direction: \"loss\", name: \"Sensex\", totalPoints: 4500, percentageChange: -2.1, pointsLost: 95 }\r\n];\r\n\r\nconst stockIndexesWorld = [\r\n    { direction: \"profit\", name: \"Dow Jones\", totalPoints: 34000, percentageChange: 3.2, pointsLost: 58 },\r\n    { direction: \"profit\", name: \"NASDAQ\", totalPoints: 15000, percentageChange: 5.7, pointsLost: 72 },\r\n    { direction: \"loss\", name: \"FTSE 100\", totalPoints: 6500, percentageChange: -1.8, pointsLost: 48 },\r\n    { direction: \"profit\", name: \"Hang Seng\", totalPoints: 26000, percentageChange: 2.6, pointsLost: 68 }\r\n];\r\n\r\nfunction createStockIndexCard(indexData) {\r\n    const cardContainer = document.getElementById('stockIndexContainer');\r\n\r\n    // Create the card div element\r\n    const card = document.createElement('div');\r\n    card.className = 'bg-white ml-2 mt-2 w-48 p-1 pr-7 rounded-lg shadow-md flex flex-row';\r\n\r\n    // Left Section (1:6 ratio)\r\n    const leftSection = document.createElement('div');\r\n    leftSection.className = indexData.direction === 'profit' ? 'w-1/7 flex flex-col justify-center rounded-md items-center bg-green-200 mt-3 mb-3 pr-1 pl-1' : 'w-1/7 flex flex-col justify-center rounded-md items-center bg-red-200 mt-3 mb-3 pr-1 pl-1'\r\n\r\n    // Use the appropriate template based on the direction\r\n    const arrowTemplate = document.getElementById(indexData.direction === 'profit' ? 'profit-arrow' : 'loss-arrow');\r\n    if (arrowTemplate) {\r\n        // Clone the template content and append it to the left section\r\n        const arrowIcon = document.importNode(arrowTemplate.content, true);\r\n        leftSection.appendChild(arrowIcon);\r\n    }\r\n\r\n    // Right Section (6:1 ratio)\r\n    const rightSection = document.createElement('div');\r\n    rightSection.className = 'w-6/7 flex flex-between justify-center';\r\n\r\n    // Stock index details\r\n    const stockDetails = document.createElement('div');\r\n    stockDetails.className = 'w-3/4 p-2';\r\n\r\n    const indexName = document.createElement('p');\r\n    indexName.className = 'text-black text-sm font-semibold';\r\n    indexName.textContent = indexData.name;\r\n\r\n    const indexTotalPoints = document.createElement('p');\r\n    indexTotalPoints.className = 'text-black text-sm font-normal';\r\n    indexTotalPoints.textContent = indexData.totalPoints.toLocaleString();\r\n\r\n    stockDetails.appendChild(indexName);\r\n    stockDetails.appendChild(indexTotalPoints);\r\n\r\n    // Percentage change and points lost\r\n    const changeDetails = document.createElement('div');\r\n    changeDetails.className = 'w-1/4 p-2';\r\n\r\n    const percentageChange = document.createElement('p');\r\n    percentageChange.className = indexData.direction === 'profit' ? 'text-green-500 text-sm font-semibold' : 'text-red-500 text-sm font-semibold';\r\n    percentageChange.textContent = indexData.percentageChange + '%';\r\n\r\n    const pointsLost = document.createElement('p');\r\n    pointsLost.className = indexData.direction === 'profit' ? 'text-green-500 text-sm font-normal' : 'text-red-500 text-sm font-normal';\r\n    pointsLost.textContent = indexData.pointsLost + 'pts';\r\n\r\n    changeDetails.appendChild(percentageChange);\r\n    changeDetails.appendChild(pointsLost);\r\n\r\n    // Append sections to the card\r\n    rightSection.appendChild(stockDetails);\r\n    rightSection.appendChild(changeDetails);\r\n    card.appendChild(leftSection);\r\n    card.appendChild(rightSection);\r\n\r\n    // Append the card to the container\r\n    cardContainer.appendChild(card);\r\n}\r\n\r\n// // Loop through the stock index data and create cards\r\n// stockIndexes.forEach((indexData) => {\r\n//     createStockIndexCard(indexData);\r\n// });\r\n\r\n\r\n// Function to display India-specific cards\r\nfunction displayIndiaStockIndexes() {\r\n    const cardContainer = document.getElementById('stockIndexContainer');\r\n    cardContainer.innerHTML = ''; // Clear existing cards\r\n\r\n    // Loop through India-specific stock index data and create cards\r\n    stockIndexesIndia.forEach((indexData) => {\r\n        createStockIndexCard(indexData);\r\n    });\r\n\r\n    // Toggle tab styles\r\n    const indiaTab = document.getElementById('indiaTab');\r\n    const worldTab = document.getElementById('worldTab');\r\n    indiaTab.classList.add('text-blue-600', 'bg-gray-100', 'active', 'dark:bg-gray-800', 'dark:text-blue-500');\r\n    indiaTab.classList.remove('hover:text-gray-600', 'hover:bg-gray-50', 'dark:hover:bg-gray-800', 'dark:hover:text-gray-300');\r\n    worldTab.classList.remove('text-blue-600', 'bg-gray-100', 'active', 'dark:bg-gray-800', 'dark:text-blue-500');\r\n    worldTab.classList.add('hover:text-gray-600', 'hover:bg-gray-50', 'dark:hover:bg-gray-800', 'dark:hover:text-gray-300');\r\n}\r\n\r\n// Function to display Rest of World-specific cards\r\nfunction displayWorldStockIndexes() {\r\n    const cardContainer = document.getElementById('stockIndexContainer');\r\n    cardContainer.innerHTML = ''; // Clear existing cards\r\n\r\n    // Loop through Rest of World-specific stock index data and create cards\r\n    stockIndexesWorld.forEach((indexData) => {\r\n        createStockIndexCard(indexData);\r\n    });\r\n\r\n    // Toggle tab styles\r\n    const indiaTab = document.getElementById('indiaTab');\r\n    const worldTab = document.getElementById('worldTab');\r\n    worldTab.classList.add('text-blue-600', 'bg-gray-100', 'active', 'dark:bg-gray-800', 'dark:text-blue-500');\r\n    worldTab.classList.remove('hover:text-gray-600', 'hover:bg-gray-50', 'dark:hover:bg-gray-800', 'dark:hover:text-gray-300');\r\n    indiaTab.classList.remove('text-blue-600', 'bg-gray-100', 'active', 'dark:bg-gray-800', 'dark:text-blue-500');\r\n    indiaTab.classList.add('hover:text-gray-600', 'hover:bg-gray-50', 'dark:hover:bg-gray-800', 'dark:hover:text-gray-300');\r\n}\r\n\r\n// Event listeners for tab buttons\r\nconst indiaTab = document.getElementById('indiaTab');\r\nconst worldTab = document.getElementById('worldTab');\r\n\r\nindiaTab.addEventListener('click', () => {\r\n    displayIndiaStockIndexes();\r\n});\r\n\r\nworldTab.addEventListener('click', () => {\r\n    displayWorldStockIndexes();\r\n});\r\n\r\n// Initially, display India-specific cards by default\r\ndisplayIndiaStockIndexes();\r\n\r\n//\r\n// Different component!\r\n\r\nlet areaChartInstance = null;\r\nlet portfolioAreaChartInstance = null;\r\n\r\n\r\n// This will be used by the static portfolio chart\r\nfunction renderPortfolioAreaChart(data) {\r\n    let options = {\r\n        chart: {\r\n            height: \"400\", // Adjust the height here\r\n            width: \"800\", // Adjust the width here\r\n            type: \"area\",\r\n            fontFamily: \"Inter, sans-serif\",\r\n            dropShadow: {\r\n                enabled: false,\r\n            },\r\n            toolbar: {\r\n                show: false,\r\n            },\r\n        },\r\n        tooltip: {\r\n            enabled: true,\r\n            x: {\r\n                show: true,\r\n            },\r\n        },\r\n        fill: {\r\n            type: \"gradient\",\r\n            gradient: {\r\n                opacityFrom: 0.55,\r\n                opacityTo: 0,\r\n                shade: \"#5fba77\",\r\n                gradientToColors: [\"#5fba77\"],\r\n            },\r\n        },\r\n        dataLabels: {\r\n            enabled: false,\r\n        },\r\n        stroke: {\r\n            width: 2, // Adjust the line thickness here\r\n        },\r\n        grid: {\r\n            show: false,\r\n            strokeDashArray: 4,\r\n            padding: {\r\n                left: 2,\r\n                right: 2,\r\n                top: 0,\r\n            },\r\n        },\r\n        series: [\r\n            {\r\n                name: \"Stock Data\",\r\n                data: data,\r\n                color: \"#5fba77\",\r\n            },\r\n        ],\r\n        xaxis: {\r\n            categories: data.map((_, index) => index),\r\n            labels: {\r\n                show: false,\r\n            },\r\n            axisBorder: {\r\n                show: false,\r\n            },\r\n            axisTicks: {\r\n                show: false,\r\n            },\r\n        },\r\n        yaxis: {\r\n            show: true,\r\n        },\r\n    };\r\n\r\n    // Check if the chart instance exists\r\n    if (!portfolioAreaChartInstance) {\r\n        // If it doesn't exist, create a new chart instance\r\n        if (document.getElementById(\"area-chart\") && typeof ApexCharts !== 'undefined') {\r\n            portfolioAreaChartInstance = new ApexCharts(document.getElementById(\"area-chart\"), options);\r\n            portfolioAreaChartInstance.render();\r\n        }\r\n    } else {\r\n        // If it exists, update the chart with new data\r\n        portfolioAreaChartInstance.updateSeries([\r\n            {\r\n                name: \"Stock Data\",\r\n                data: data,\r\n            },\r\n        ]);\r\n    }\r\n}\r\n\r\n// This will be used by the popup charts\r\nfunction renderStockAreaChart(data) {\r\n    let options = {\r\n        chart: {\r\n            height: \"400\", // Adjust the height here\r\n            width: \"800\", // Adjust the width here\r\n            type: \"area\",\r\n            fontFamily: \"Inter, sans-serif\",\r\n            dropShadow: {\r\n                enabled: false,\r\n            },\r\n            toolbar: {\r\n                show: false,\r\n            },\r\n        },\r\n        tooltip: {\r\n            enabled: true,\r\n            x: {\r\n                show: true,\r\n            },\r\n        },\r\n        fill: {\r\n            type: \"gradient\",\r\n            gradient: {\r\n                opacityFrom: 0.55,\r\n                opacityTo: 0,\r\n                shade: \"#5fba77\",\r\n                gradientToColors: [\"#5fba77\"],\r\n            },\r\n        },\r\n        dataLabels: {\r\n            enabled: false,\r\n        },\r\n        stroke: {\r\n            width: 2, // Adjust the line thickness here\r\n        },\r\n        grid: {\r\n            show: false,\r\n            strokeDashArray: 4,\r\n            padding: {\r\n                left: 2,\r\n                right: 2,\r\n                top: 0,\r\n            },\r\n        },\r\n        series: [\r\n            {\r\n                name: \"Stock Data\",\r\n                data: data,\r\n                color: \"#5fba77\",\r\n            },\r\n        ],\r\n        xaxis: {\r\n            categories: data.map((_, index) => index),\r\n            labels: {\r\n                show: false,\r\n            },\r\n            axisBorder: {\r\n                show: false,\r\n            },\r\n            axisTicks: {\r\n                show: false,\r\n            },\r\n        },\r\n        yaxis: {\r\n            show: true,\r\n        },\r\n    };\r\n\r\n    // Check if the chart instance exists\r\n    if (!areaChartInstance) {\r\n        // If it doesn't exist, create a new chart instance\r\n        if (document.getElementById(\"modal-area-chart\") && typeof ApexCharts !== 'undefined') {\r\n            areaChartInstance = new ApexCharts(document.getElementById(\"modal-area-chart\"), options);\r\n            areaChartInstance.render();\r\n        }\r\n    } else {\r\n        // If it exists, update the chart with new data\r\n        areaChartInstance.updateSeries([\r\n            {\r\n                name: \"Stock Data\",\r\n                data: data,\r\n            },\r\n        ]);\r\n    }\r\n}\r\n\r\n// Sample data with 300 data points\r\nconst mockChartData = [];\r\nfor (let i = 0; i < 100; i++) {\r\n    mockChartData.push(Math.floor(Math.random() * 1000));\r\n}\r\n\r\n//Section        \r\n// Search bar things\r\nconst searchInput = document.getElementById('default-search');\r\nconst resultCard = document.getElementById('resultCard');\r\nconst dataList = document.getElementById('stock-options'); // Datalist element\r\n\r\n// Static data for demonstration (replace with your own data)\r\nconst staticData = [\r\n    { name: 'Apple Inc.' },\r\n    { name: 'Microsoft Corporation' },\r\n    { name: 'Amazon.com Inc.' },\r\n    { name: 'Google LLC' },\r\n    { name: 'Facebook, Inc.' },\r\n    { name: 'Tesla, Inc.' },\r\n];\r\n\r\nlet selectedOptionIndex = -1; // Initialize as -1 (no selection)\r\n\r\n// Collection of list items\r\nconst listItems = [];\r\n\r\n// Function to update the card with static data\r\nfunction updateCard(query) {\r\n    const filteredData = staticData.filter(item => item.name.toLowerCase().includes(query.toLowerCase()));\r\n    if (filteredData.length > 0) {\r\n        resultCard.innerHTML = '';\r\n        listItems.length = 0; // Clear the list of items\r\n\r\n        filteredData.forEach((item, index) => {\r\n            const itemElement = document.createElement('div');\r\n            itemElement.textContent = item.name;\r\n            itemElement.classList.add('cursor-pointer', 'hover:text-blue-500', 'px-2', 'py-1');\r\n\r\n            itemElement.addEventListener('click', () => {\r\n                selectOption(index);\r\n            });\r\n\r\n            listItems.push(itemElement); // Add the item to the collection\r\n            resultCard.appendChild(itemElement);\r\n        });\r\n\r\n        // Update selected option index when the list is filtered\r\n        if (selectedOptionIndex >= 0) {\r\n            selectedOptionIndex = filteredData.findIndex(item => item.name === staticData[selectedOptionIndex].name);\r\n        }\r\n\r\n        resultCard.classList.remove('invisible');\r\n    } else {\r\n        resultCard.innerHTML = 'No results found.';\r\n        resultCard.classList.add('invisible');\r\n    }\r\n}\r\n\r\n// Event listener for input changes\r\nsearchInput.addEventListener('input', () => {\r\n    const query = searchInput.value;\r\n    if (query.length > 0) {\r\n        updateCard(query);\r\n    } else {\r\n        resultCard.innerHTML = ''; // Clear the card when the input is empty\r\n        resultCard.classList.add('invisible');\r\n    }\r\n});\r\n\r\n// Event listener for keydown events on the document\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (listItems.length === 0) return; // No items to navigate\r\n\r\n    if (event.key === 'ArrowDown') {\r\n        event.preventDefault(); // Prevent scrolling\r\n        selectedOptionIndex = Math.min(selectedOptionIndex + 1, listItems.length - 1);\r\n        updateSelectedItem();\r\n    } else if (event.key === 'ArrowUp') {\r\n        event.preventDefault(); // Prevent scrolling\r\n        selectedOptionIndex = Math.max(selectedOptionIndex - 1, -1);\r\n        updateSelectedItem();\r\n    } else if (event.key === 'Enter') {\r\n        event.preventDefault(); // Prevent form submission\r\n        selectOption(selectedOptionIndex);\r\n    }\r\n});\r\n\r\nlet mockData = {\r\n    stockName: \"\",\r\n    profitLoss: \"\",\r\n    profitLossPercent: \"\",\r\n    chartData: mockChartData\r\n    // You can add other data fields here\r\n};\r\n\r\n// Function to select an option and populate the search bar\r\nfunction selectOption(index) {\r\n    const selectedOption = listItems[index];\r\n    if (selectedOption) {\r\n        searchInput.value = selectedOption.textContent;\r\n        searchInput.classList.add('ring-blue-500', 'border-blue-500'); // Change the styling\r\n        resultCard.classList.add('invisible');\r\n\r\n        // Create a mock data object for the selected stock (replace with actual data)\r\n        const mockData = {\r\n            stockName: selectedOption.textContent,\r\n            profitLoss: '$2,221',\r\n            profitLossPercent: '+2.1%',\r\n            chartData: mockChartData\r\n            // You can add other data fields here\r\n        };\r\n\r\n        // Open the modal with the selected data\r\n        openModalWithData(mockData);\r\n        console.log(\"SOption, After Open, Before Render\");\r\n        // Render the chart in the modal\r\n        renderStockAreaChart(mockData.chartData); // Replace with the actual chart data\r\n        console.log(\"SOption, After Render\");\r\n\r\n    }\r\n}\r\n\r\n\r\n// Function to update the styling of the selected item\r\nfunction updateSelectedItem() {\r\n    listItems.forEach((item, itemIndex) => {\r\n        if (itemIndex === selectedOptionIndex) {\r\n            item.classList.add('bg-blue-100'); // Add your desired styling for the selected item\r\n        } else {\r\n            item.classList.remove('bg-blue-100');\r\n        }\r\n    });\r\n}\r\n\r\n// Doing some modal magic\r\n// Function to open the modal with data\r\nfunction openModalWithData(data) {\r\n    console.log(\"Clicked once\");\r\n\r\n    const stockNameElement = document.getElementById('modal-stock-name');\r\n    const profitLossElement = document.getElementById('modal-profit-loss');\r\n    const profitLossPercentElement = document.getElementById('modal-profit-loss-percent');\r\n\r\n    // Populate modal elements with data\r\n    stockNameElement.textContent = data.stockName;\r\n    profitLossElement.textContent = data.profitLoss;\r\n    profitLossPercentElement.textContent = data.profitLossPercent;\r\n\r\n    const toggleButton = document.getElementById(\"defaultModalButton\")\r\n    toggleButton.click();\r\n}\r\n\r\n// Cooking with some dynamic portfolio rows\r\n// Sample portfolio data (replace this with your actual data)\r\nconst portfolioData = {\r\n    totalValue: 100000, // Replace with your portfolio's total value\r\n    totalValuePercent: 15.1, // Replace with your portfolio's percentage change\r\n    tableData: [\r\n        [\"AAPL\", \"Apple Inc.\", 150.00, 143.10, 100, 15000.00, 5000, 20.1],\r\n        [\"GOOGL\", \"Alphabet Inc.\", 2800.00, 3142.24, 50, 14000.00, -2000, -17.3],\r\n        [\"MSFT\", \"Microsoft Corporation\", 250.00, 260.50, 75, 19537.50, 2250, 15.0],\r\n        [\"AMZN\", \"Amazon.com Inc.\", 3300.00, 3200.50, 30, 96015.00, -945, -5.0],\r\n        [\"TSLA\", \"Tesla, Inc.\", 700.00, 725.25, 45, 32661.25, 1125, 25.0],\r\n        [\"FB\", \"Facebook, Inc.\", 340.00, 325.75, 60, 19545.00, -882, -12.3],\r\n        [\"NVDA\", \"NVIDIA Corporation\", 600.00, 580.25, 25, 14506.25, -493, -9.7],\r\n        [\"NFLX\", \"Netflix, Inc.\", 550.00, 540.75, 40, 21630.00, -372, -6.5],\r\n        [\"PYPL\", \"PayPal Holdings, Inc.\", 210.00, 215.50, 90, 19395.00, 495, 10.5],\r\n        [\"SQ\", \"Square, Inc.\", 220.00, 235.75, 70, 16402.50, 1092, 22.5]\r\n    ]    \r\n};\r\n\r\n// Function to populate the portfolio total value and percentage\r\nfunction populatePortfolioData() {\r\n    const totalValueElement = document.getElementById('portfolio-total-value');\r\n    const totalValuePercentElement = document.getElementById('portfolio-total-value-percent');\r\n\r\n    // Set the total value text content\r\n    totalValuePercentElement.textContent = `${portfolioData.totalValuePercent.toFixed(2)}%`;\r\n    // Set the total value percentage text content\r\n    if (portfolioData.totalValuePercent >= 0) {\r\n        totalValueElement.textContent = `$+${portfolioData.totalValue.toFixed(2)}`;\r\n        totalValueElement.classList.add('text-lg','font-semibold','text-green-500', 'dark:text-green-400', 'pr-3')\r\n        totalValuePercentElement.classList.add('text-lg','font-semibold','rounded-md','ml-5', 'pr-1', 'pl-1', 'text-green-500', 'bg-green-200', 'dark:text-green-400');\r\n    } else {\r\n        totalValueElement.textContent = `$-${portfolioData.totalValue.toFixed(2)}`;\r\n        totalValueElement.classList.add('text-lg','font-semibold','text-red-500', 'dark:text-red-400', 'pr-3')\r\n        totalValuePercentElement.classList.add('text-lg','font-semibold','rounded-md','ml-5', 'pr-1', 'pl-1', 'text-red-500', 'bg-red-200', 'dark:text-red-400');\r\n    }\r\n}\r\n\r\n// Function to generate and populate the table rows\r\nfunction generateTableRows() {\r\n    const tableBody = document.querySelector('#portfolio-table tbody');\r\n\r\n    // Clear existing table rows\r\n    tableBody.innerHTML = '';\r\n\r\n    // Loop through the table data and generate rows\r\n    portfolioData.tableData.forEach(rowData => {\r\n        \r\n        const row = document.createElement('tr');\r\n        \r\n        row.addEventListener('mouseenter', () => {\r\n            row.classList.add('cursor-pointer');\r\n        });\r\n\r\n        // Remove the cursor-pointer class when the mouse leaves\r\n        row.addEventListener('mouseleave', () => {\r\n            row.classList.remove('cursor-pointer');\r\n        });\r\n\r\n        let flag = 0;\r\n        rowData.forEach((data, index) => {\r\n            const cell = document.createElement(index === 0 ? 'th' : 'td');\r\n            const classesToAdd = [];\r\n        \r\n            if (index === 0) {\r\n                classesToAdd.push('px-1.5', 'py-1', 'text-center');\r\n            } else if (index === 1) {\r\n                classesToAdd.push('px-8', 'py-1');\r\n            } else if (index === 2 || index === 3 || index === 5) {\r\n                classesToAdd.push('px-3', 'py-1', 'text-right');\r\n            } else if (index === 4) {\r\n                classesToAdd.push('px-3', 'py-1');\r\n            } else if (index === 6) {\r\n                data >= 0 ? classesToAdd.push('px-3', 'py-1', 'text-center', 'text-green-500') : \r\n                classesToAdd.push('px-3', 'py-1', 'text-center', 'text-red-500');\r\n            } else if (index === 7) {\r\n                classesToAdd.push('px-3', 'py-1', 'text-center');\r\n                data >= 0 ? flag = 0 : flag = 1;\r\n            }\r\n        \r\n            cell.classList.add(...classesToAdd);\r\n\r\n            // Add the generated classes to the cell\r\n            cell.textContent = index === 0 ? data : (index === 6 || index === 7) ? `$${data.toFixed(2)}` : data;\r\n\r\n            if (index === 0) {\r\n                // Generate random dark background color for the first cell\r\n                const randomColor = getRandomDarkColor();\r\n                cell.innerHTML = `<div class=\"bg-${randomColor} text-white dark:text-${randomColor}-200 font-semibold rounded-md mt-1 p-0.5\">${data}</div>`;\r\n            }\r\n            else if (index == 7) {\r\n                if(flag === 0){\r\n                cell.innerHTML = `<div class= \"bg-green-200 text-green-500 dark:text-green-400 font-semibold rounded-md mt-1 p-0.5\">${data}%</div>`;\r\n                } \r\n                else {\r\n                cell.innerHTML = `<div class= \"bg-red-200 text-red-500 dark:text-red-400 font-semibold rounded-md mt-1 p-0.5\">${data}%</div>`;        \r\n                }\r\n            }\r\n\r\n            if (index === 0) {\r\n                row.addEventListener('click', () => {\r\n                    openModalWithData({\r\n                        stockName: rowData[1],\r\n                        profitLoss: rowData[6],\r\n                        profitLossPercent: rowData[7]\r\n                    });\r\n                    renderStockAreaChart(mockData.chartData);\r\n                });\r\n            }\r\n\r\n            row.appendChild(cell);\r\n        });\r\n\r\n        tableBody.appendChild(row);\r\n    });\r\n}\r\n\r\n// Helper function to generate random dark color classes\r\nfunction getRandomDarkColor() {\r\n    const colors = ['blue', 'purple', 'pink', 'indigo', 'green', 'red'];\r\n    const randomIndex = Math.floor(Math.random() * colors.length);\r\n    return `${colors[randomIndex]}-800`;\r\n}\r\n\r\n// Call the functions to populate data and generate table rows\r\npopulatePortfolioData();\r\ngenerateTableRows();\r\n\r\n// Generate portfolio chart\r\nrenderPortfolioAreaChart(mockData.chartData);\r\n\n\n//# sourceURL=webpack://portfolio-manager-frontend/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;